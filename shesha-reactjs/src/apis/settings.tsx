/* Generated by restful-react */

import React from 'react';
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react';

import * as RestfulShesha from '../utils/fetchers';
export const SPEC_VERSION = 'v1';
export interface AjaxResponseBase {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
}

export interface ErrorInfo {
  code?: number;
  message?: string | null;
  details?: string | null;
  validationErrors?: ValidationErrorInfo[] | null;
}

export interface ObjectAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: {} | null;
}

/**
 * Setting identifier. Contains name and module name
 */
export interface SettingIdentifier {
  name?: string | null;
  module?: string | null;
  fullName?: string | null;
}

export interface SettingIdentifierObjectDictionaryAjaxResponse {
  targetUrl?: string | null;
  success?: boolean;
  error?: ErrorInfo;
  unAuthorizedRequest?: boolean;
  __abp?: boolean;
  result?: {
    [key: string]: {} | null;
  } | null;
}

/**
 * Update setting value input
 */
export interface UpdateSettingValueInput {
  /**
   * Setting name
   */
  name?: string | null;
  /**
   * Module name
   */
  module?: string | null;
  /**
   * Setting value
   */
  value?: {} | null;
  /**
   * Front-end application key, see <seealso cref="P:Shesha.Domain.FrontEndApp.AppKey" />. Is used for client-specific applications only
   */
  appKey?: string | null;
}

export interface ValidationErrorInfo {
  message?: string | null;
  members?: string[] | null;
}

export interface SettingsGetValuesQueryParams {
  identifiers?: SettingIdentifier[];
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingsGetValuesProps = Omit<
  GetProps<SettingIdentifierObjectDictionaryAjaxResponse, AjaxResponseBase, SettingsGetValuesQueryParams, void>,
  'path'
>;

/**
 * Get setting values
 */
export const SettingsGetValues = (props: SettingsGetValuesProps) => (
  <Get<SettingIdentifierObjectDictionaryAjaxResponse, AjaxResponseBase, SettingsGetValuesQueryParams, void>
    path={`/api/services/app/Settings/GetValues`}
    {...props}
  />
);

export type UseSettingsGetValuesProps = Omit<
  UseGetProps<SettingIdentifierObjectDictionaryAjaxResponse, AjaxResponseBase, SettingsGetValuesQueryParams, void>,
  'path'
>;

/**
 * Get setting values
 */
export const useSettingsGetValues = (props: UseSettingsGetValuesProps) =>
  useGet<SettingIdentifierObjectDictionaryAjaxResponse, AjaxResponseBase, SettingsGetValuesQueryParams, void>(
    `/api/services/app/Settings/GetValues`,
    props
  );

export type settingsGetValuesProps = Omit<
  RestfulShesha.GetProps<
    SettingIdentifierObjectDictionaryAjaxResponse,
    AjaxResponseBase,
    SettingsGetValuesQueryParams,
    void
  >,
  'queryParams'
>;
/**
 * Get setting values
 */
export const settingsGetValues = (queryParams: SettingsGetValuesQueryParams, props: settingsGetValuesProps) =>
  RestfulShesha.get<
    SettingIdentifierObjectDictionaryAjaxResponse,
    AjaxResponseBase,
    SettingsGetValuesQueryParams,
    void
  >(`/api/services/app/Settings/GetValues`, queryParams, props);

export interface SettingsGetValueQueryParams {
  /**
   * Front-end application key, see <seealso cref="P:Shesha.Domain.FrontEndApp.AppKey" />. Is used for client-specific applications only.
   * NOTE: this parameter if optional with fallback to the `sha-frontend-application` header
   */
  appKey?: string;
  /**
   * Setting name
   */
  name?: string;
  /**
   * Module name
   */
  module?: string;
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingsGetValueProps = Omit<
  GetProps<ObjectAjaxResponse, AjaxResponseBase, SettingsGetValueQueryParams, void>,
  'path'
>;

/**
 * Get setting value
 */
export const SettingsGetValue = (props: SettingsGetValueProps) => (
  <Get<ObjectAjaxResponse, AjaxResponseBase, SettingsGetValueQueryParams, void>
    path={`/api/services/app/Settings/GetValue`}
    {...props}
  />
);

export type UseSettingsGetValueProps = Omit<
  UseGetProps<ObjectAjaxResponse, AjaxResponseBase, SettingsGetValueQueryParams, void>,
  'path'
>;

/**
 * Get setting value
 */
export const useSettingsGetValue = (props: UseSettingsGetValueProps) =>
  useGet<ObjectAjaxResponse, AjaxResponseBase, SettingsGetValueQueryParams, void>(
    `/api/services/app/Settings/GetValue`,
    props
  );

export type settingsGetValueProps = Omit<
  RestfulShesha.GetProps<ObjectAjaxResponse, AjaxResponseBase, SettingsGetValueQueryParams, void>,
  'queryParams'
>;
/**
 * Get setting value
 */
export const settingsGetValue = (queryParams: SettingsGetValueQueryParams, props: settingsGetValueProps) =>
  RestfulShesha.get<ObjectAjaxResponse, AjaxResponseBase, SettingsGetValueQueryParams, void>(
    `/api/services/app/Settings/GetValue`,
    queryParams,
    props
  );

export interface SettingsUpdateValueQueryParams {
  /**
   * The requested API version
   */
  'api-version'?: string;
}

export type SettingsUpdateValueProps = Omit<
  MutateProps<void, unknown, SettingsUpdateValueQueryParams, UpdateSettingValueInput, void>,
  'path' | 'verb'
>;

/**
 * Update setting value
 */
export const SettingsUpdateValue = (props: SettingsUpdateValueProps) => (
  <Mutate<void, unknown, SettingsUpdateValueQueryParams, UpdateSettingValueInput, void>
    verb="POST"
    path={`/api/services/app/Settings/UpdateValue`}
    {...props}
  />
);

export type UseSettingsUpdateValueProps = Omit<
  UseMutateProps<void, unknown, SettingsUpdateValueQueryParams, UpdateSettingValueInput, void>,
  'path' | 'verb'
>;

/**
 * Update setting value
 */
export const useSettingsUpdateValue = (props: UseSettingsUpdateValueProps) =>
  useMutate<void, unknown, SettingsUpdateValueQueryParams, UpdateSettingValueInput, void>(
    'POST',
    `/api/services/app/Settings/UpdateValue`,
    props
  );

export type settingsUpdateValueProps = Omit<
  RestfulShesha.MutateProps<void, unknown, SettingsUpdateValueQueryParams, UpdateSettingValueInput, void>,
  'data'
>;
/**
 * Update setting value
 */
export const settingsUpdateValue = (data: UpdateSettingValueInput, props: settingsUpdateValueProps) =>
  RestfulShesha.mutate<void, unknown, SettingsUpdateValueQueryParams, UpdateSettingValueInput, void>(
    'POST',
    `/api/services/app/Settings/UpdateValue`,
    data,
    props
  );
